/*******************************************************************************
 * Copyright (c) 2016, Huawei Technologies Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package org.openo.crossdomain.commonsvc.executor.rest;

import org.openo.commonservice.biz.trail.AuditItem;
import org.openo.commonservice.remoteservice.exception.ServiceException;
import org.openo.commonservice.roa.annotation.*;
import org.openo.commonservice.roa.common.HttpContext;
import org.openo.commonservice.roa.common.RequestInputStream;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.openo.crossdomain.commonsvc.executor.common.constant.Constants;
import org.openo.crossdomain.commonsvc.executor.common.constant.ErrorMessage;
import org.openo.crossdomain.commonsvc.executor.common.constant.RequestJsonConstants;
import org.openo.crossdomain.commonsvc.executor.common.module.IResource;
import org.openo.crossdomain.commonsvc.executor.common.util.LogUtil;
import org.openo.crossdomain.commonsvc.executor.common.util.ServiceExceptionUtil;
import org.openo.crossdomain.commonsvc.executor.model.ServiceJob;
import org.openo.crossdomain.commonsvc.executor.service.inf.IServiceExecutorService;
import org.springframework.util.StringUtils;

import java.util.List;

/**
 * Service Executor ROA Service API
 * dealing with the Rest Request from Service Decomposer<br/>
 *
 * @author
 * @version crossdomain 0.5 2016-3-18
 */
@Path("/executor/v1/jobs")
@Target("executor")
public class ServiceExecutorROAService extends IResource<IServiceExecutorService> {

    /**
     * Get Rest URI<br/>
     *
     * @return Rest URI
     * @since crossdomain 0.5
     */
    @Override
    public String getResUri() {
        return "/executor/v1/jobs";
    }

    /**
     * Execute Jobs
     * convert request input stream into job model, the send it to plugins<br/>
     *
     * @param input Request Input Stream
     * @param context HttpContext
     * @return an url used for job detail query(use "location" as key)
     * @throws ServiceException when fail execute jobs
     * @since crossdomain 0.5
     */
    @POST
    @Consumes({Constants.APPLICATION_JSON})
    @Produces({Constants.APPLICATION_JSON})
    public String executeJob(RequestInputStream input, HttpContext context) throws ServiceException {
        try {
            return service.executeJob(input, context);
        } catch(ServiceException e) {
            // Record Exception logs
            LogUtil.writeOperateExceptionLog(context, AuditItem.LogSeverity.RISK, e);
            throw e;
        }
    }

    /**
     * Get Job Detail
     * when Service Executor complete the job, get the job detail by the job id<br/>
     *
     * @param jobId UUID generated by UUID generator for Job
     * @param context HttpContext from request
     * @return job detail by the job id
     * @throws ServiceException when fail to get job detail by the job id
     * @since crossdomain 0.5
     */
    @GET
    @Path("/{job_id}")
    @Consumes({Constants.APPLICATION_JSON})
    @Produces({Constants.APPLICATION_JSON})
    public String getJobDetail(@PathParam("job_id") String jobId, HttpContext context) throws ServiceException {
        if(!StringUtils.hasLength(jobId)) {
            String msg = String.format(ErrorMessage.OBJECT_NULL_MSG, RequestJsonConstants.ServiceJob.jobId);
            ServiceExceptionUtil.throwBadRequestException(msg);
        }

        String tenantId = context.getHttpServletRequest().getHeader(Constants.HttpContext.X_TENANT_ID);
        if(tenantId == null) {
            tenantId = Constants.NULL_STR;
        }

        ServiceJob job = service.getJobDetail(tenantId, jobId);
        if(job != null) {
            return job.generateExecuteCallBackContent();
        } else {
            return Constants.NULL_STR;
        }
    }

    /**
     * Get Job List
     * get all job executing status, display using pagination<br/>
     *
     * @param serviceId UUID of the service
     * @param pageIndex Page Number
     * @param pageCapacity maximum numbers of items to display in a page
     * @return all job executing status, display using pagination
     * @throws ServiceException when fail to get the job list
     * @since crossdomain 0.5
     */
    @GET
    @Consumes({Constants.APPLICATION_JSON})
    @Produces({Constants.APPLICATION_JSON})
    public String getJobList(@QueryParam("service_id") String serviceId, @QueryParam("page_index") String pageIndex,
            @QueryParam("page_capacity") String pageCapacity) throws ServiceException {
        List<ServiceJob> jobList = service.getJobList(serviceId, pageIndex, pageCapacity);
        JSONArray jobArray = new JSONArray();
        if(jobList != null) {
            for(ServiceJob serviceJob : jobList) {
                JSONObject jobJson = serviceJob.serviceJob2Json();
                jobArray.add(jobJson);
            }
        }
        return jobArray.toString();
    }

}
